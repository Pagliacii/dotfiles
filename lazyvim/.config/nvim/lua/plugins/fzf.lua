-- it has benn lazy-load by default, but whatever we use this for which-key popup descriptions
local fl = setmetatable({}, {
  __index = function(_, k)
    return ([[<cmd>lua require('fzf-lua-overlay').%s()<cr>]]):format(k)
  end,
})

return {
  {
    "ibhagwan/fzf-lua",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    cmd = { "FzfLua" },
    opts = {
      "telescope",
      global_resume = true,
      global_resume_query = true,
      grep = {
        rg_opts = table.concat({
          "--column",
          "--line-number",
          "--no-heading",
          "--color=always",
          "--smart-case",
          "--max-columns=4096",
          "--hidden",
          "-e",
        }, " "),
      },
      winopts = {
        preview = {
          default = "bat",
          layout = "vertical",
          scrollbar = "float",
        },
        fullscreen = false,
        vertical = "down:45%",
        horizontal = "right:60%",
        hidden = "nohidden",
        on_create = function()
          vim.keymap.set("t", "<C-j>", "<Down>", { silent = true, buffer = true })
          vim.keymap.set("t", "<C-k>", "<Up>", { silent = true, buffer = true })
        end,
      },
      keymap = {
        builtin = {
          ["ctrl-/"] = "toggle-help",
          ["ctrl-f"] = "toggle-fullscreen",
          ["ctrl-w"] = "toggle-preview-wrap",
          ["ctrl-p"] = "toggle-preview",
          ["ctrl-h"] = "preview-page-up",
          ["ctrl-l"] = "preview-page-down",
          ["ctrl-r"] = "preview-page-reset",
        },
        fzf = {
          ["ctrl-c"] = "abort",
          ["ctrl-w"] = "toggle-preview-wrap",
          ["ctrl-p"] = "toggle-preview",
        },
      },
    },
    keys = {
      {
        "<leader>Fr",
        "<cmd>lua require('fzf-lua').resume()<cr>",
        desc = "resume",
        noremap = true,
      },
      {
        "<leader>Ff",
        "<cmd>lua require('fzf-lua').files()<cr>",
        desc = "files",
        noremap = true,
      },
      {
        "<leader>Fb",
        "<cmd>lua require('fzf-lua').buffers()<cr>",
        desc = "buffers",
        noremap = true,
      },
      {
        "<leader>Fo",
        "<cmd>lua require('fzf-lua').oldfiles()<cr>",
        desc = "oldfiles",
        noremap = true,
      },
      {
        "<leader>Fx",
        "<cmd>lua require('fzf-lua').quickfix()<cr>",
        desc = "quickfix list",
        noremap = true,
      },
      {
        "<leader>FX",
        "<cmd>lua require('fzf-lua').quickfix_stack()<cr>",
        desc = "quickfix stack",
        noremap = true,
      },
      {
        "<leader>Fj",
        "<cmd>lua require('fzf-lua').loclist()<cr>",
        desc = "location list",
        noremap = true,
      },
      {
        "<leader>FJ",
        "<cmd>lua require('fzf-lua').loclist_stack()<cr>",
        desc = "location stack",
        noremap = true,
      },
      {
        "<leader>FB",
        "<cmd>lua require('fzf-lua').lines()<cr>",
        desc = "buffers lines",
        noremap = true,
      },
      {
        "<leader>Fc",
        "<cmd>lua require('fzf-lua').blines()<cr>",
        desc = "current buffers lines",
        noremap = true,
      },
      {
        "<leader>FT",
        "<cmd>lua require('fzf-lua').tabs()<cr>",
        desc = "tabs",
        noremap = true,
      },
      {
        "<leader>Fa",
        "<cmd>lua require('fzf-lua').args()<cr>",
        desc = "args",
        noremap = true,
      },
      {
        "<leader>Fss",
        "<cmd>lua require('fzf-lua').grep()<cr>",
        desc = "grep",
        noremap = true,
      },
      {
        "<leader>Fsl",
        "<cmd>lua require('fzf-lua').grep_last()<cr>",
        desc = "grep last",
        noremap = true,
      },
      {
        "<leader>Fsw",
        "<cmd>lua require('fzf-lua').grep_cword()<cr>",
        desc = "grep word",
        noremap = true,
      },
      {
        "<leader>FsW",
        "<cmd>lua require('fzf-lua').grep_cWORD()<cr>",
        desc = "grep WORD",
        noremap = true,
      },
      {
        "<leader>Fss",
        "<cmd>lua require('fzf-lua').grep_visual()<cr>",
        mode = { "n", "v" },
        desc = "grep visual",
        noremap = true,
      },
      {
        "<leader>Fsp",
        "<cmd>lua require('fzf-lua').grep_project()<cr>",
        desc = "grep project lines",
        noremap = true,
      },
      {
        "<leader>Fsb",
        "<cmd>lua require('fzf-lua').lgrep_curbuf()<cr>",
        desc = "live grep (buffer)",
        noremap = true,
      },
      {
        "<leader>Fsg",
        "<cmd>lua require('fzf-lua').live_grep()<cr>",
        desc = "live grep (project)",
        noremap = true,
      },
      {
        "<leader>Fsr",
        "<cmd>lua require('fzf-lua').live_grep_resume()<cr>",
        desc = "live grep resume",
        noremap = true,
      },
      {
        "<leader>FsG",
        "<cmd>lua require('fzf-lua').live_grep_glob()<cr>",
        desc = "live grep (glob)",
        noremap = true,
      },
      {
        "<leader>Fsn",
        "<cmd>lua require('fzf-lua').live_grep_native()<cr>",
        desc = "live grep (native)",
        noremap = true,
      },
      {
        "<leader>Fsn",
        "<cmd>lua require('fzf-lua').grep_visual({ fzf_opts = { ['--layout'] = 'default' } })<cr>",
        desc = "grep",
        noremap = true,
      },
      {
        "<leader>Ftt",
        "<cmd>lua require('fzf-lua').tags()<cr>",
        desc = "project",
        noremap = true,
      },
      {
        "<leader>Ftb",
        "<cmd>lua require('fzf-lua').btags()<cr>",
        desc = "buffer",
        noremap = true,
      },
      {
        "<leader>Ftg",
        "<cmd>lua require('fzf-lua').tags_grep()<cr>",
        desc = "grep",
        noremap = true,
      },
      {
        "<leader>Ftw",
        "<cmd>lua require('fzf-lua').tags_grep_cword()<cr>",
        desc = "grep word",
        noremap = true,
      },
      {
        "<leader>FtW",
        "<cmd>lua require('fzf-lua').tags_grep_cWORD()<cr>",
        desc = "grep WORD",
        noremap = true,
      },
      {
        "<leader>Ftv",
        "<cmd>lua require('fzf-lua').tags_grep_visual()<cr>",
        mode = { "n", "v" },
        desc = "grep visual",
        noremap = true,
      },
      {
        "<leader>Ftl",
        "<cmd>lua require('fzf-lua').tags_live_grep()<cr>",
        desc = "live grep",
        noremap = true,
      },
      {
        "<leader>Fgf",
        "<cmd>lua require('fzf-lua').git_files()<cr>",
        desc = "ls-files",
        noremap = true,
      },
      {
        "<leader>Fgs",
        "<cmd>lua require('fzf-lua').git_status()<cr>",
        desc = "status",
        noremap = true,
      },
      {
        "<leader>Fgc",
        "<cmd>lua require('fzf-lua').git_bcommits()<cr>",
        desc = "commits",
        noremap = true,
      },
      {
        "<leader>FgC",
        "<cmd>lua require('fzf-lua').git_commits()<cr>",
        desc = "commits (project)",
        noremap = true,
      },
      {
        "<leader>Fgb",
        "<cmd>lua require('fzf-lua').git_branches()<cr>",
        desc = "branches",
        noremap = true,
      },
      {
        "<leader>Fgh",
        "<cmd>lua require('fzf-lua').git_stash()<cr>",
        desc = "stash",
        noremap = true,
      },
      {
        "<leader>Flr",
        "<cmd>lua require('fzf-lua').lsp_references()<cr>",
        desc = "references",
        noremap = true,
      },
      {
        "<leader>Fld",
        "<cmd>lua require('fzf-lua').lsp_definitions()<cr>",
        desc = "definitions",
        noremap = true,
      },
      {
        "<leader>FlD",
        "<cmd>lua require('fzf-lua').lsp_declarations()<cr>",
        desc = "declarations",
        noremap = true,
      },
      {
        "<leader>Flt",
        "<cmd>lua require('fzf-lua').lsp_typedefs()<cr>",
        desc = "type definitions",
        noremap = true,
      },
      {
        "<leader>FlI",
        "<cmd>lua require('fzf-lua').lsp_implementations()<cr>",
        desc = "implementations",
        noremap = true,
      },
      {
        "<leader>Fls",
        "<cmd>lua require('fzf-lua').lsp_document_symbols()<cr>",
        desc = "doc symbols",
        noremap = true,
      },
      {
        "<leader>FlS",
        "<cmd>lua require('fzf-lua').lsp_workspace_symbols()<cr>",
        desc = "workspace symbols",
        noremap = true,
      },
      {
        "<leader>Fll",
        "<cmd>lua require('fzf-lua').lsp_live_workspace_symbols()<cr>",
        desc = "workspace symbols (live)",
        noremap = true,
      },
      {
        "<leader>Flc",
        "<cmd>lua require('fzf-lua').lsp_code_actions()<cr>",
        desc = "code actions",
        noremap = true,
      },
      {
        "<leader>Fli",
        "<cmd>lua require('fzf-lua').lsp_incoming_calls()<cr>",
        desc = "incoming calls",
        noremap = true,
      },
      {
        "<leader>Flo",
        "<cmd>lua require('fzf-lua').lsp_outgoing_calls()<cr>",
        desc = "outgoing calls",
        noremap = true,
      },
      {
        "<leader>Flf",
        "<cmd>lua require('fzf-lua').lsp_finder()<cr>",
        desc = "finder",
        noremap = true,
      },
      {
        "<leader>Flx",
        "<cmd>lua require('fzf-lua').lsp_document_diagnostics()<cr>",
        desc = "doc diagnostics",
        noremap = true,
      },
      {
        "<leader>FlX",
        "<cmd>lua require('fzf-lua').lsp_workspace_diagnostics()<cr>",
        desc = "workspace diagnostics",
        noremap = true,
      },
      {
        "<leader>Fdc",
        "<cmd>lua require('fzf-lua').dap_commands()<cr>",
        desc = "commands",
        noremap = true,
      },
      {
        "<leader>Fds",
        "<cmd>lua require('fzf-lua').dap_configurations()<cr>",
        desc = "configurations",
        noremap = true,
      },
      {
        "<leader>Fdb",
        "<cmd>lua require('fzf-lua').dap_breakpoints()<cr>",
        desc = "breakpoints",
        noremap = true,
      },
      {
        "<leader>Fdf",
        "<cmd>lua require('fzf-lua').dap_frames()<cr>",
        desc = "frames",
        noremap = true,
      },
      {
        "<leader>Fmb",
        "<cmd>lua require('fzf-lua').builtin()<cr>",
        desc = "builtin",
        noremap = true,
      },
      {
        "<leader>Fmp",
        "<cmd>lua require('fzf-lua').profiles()<cr>",
        desc = "profiles",
        noremap = true,
      },
      {
        "<leader>Fmh",
        "<cmd>lua require('fzf-lua').help_tags()<cr>",
        desc = "help tags",
        noremap = true,
      },
      {
        "<leader>Fmm",
        "<cmd>lua require('fzf-lua').man_pages()<cr>",
        desc = "man pages",
        noremap = true,
      },
      {
        "<leader>Fmo",
        "<cmd>lua require('fzf-lua').colorschemes()<cr>",
        desc = "color schemes",
        noremap = true,
      },
      {
        "<leader>FmH",
        "<cmd>lua require('fzf-lua').highlights()<cr>",
        desc = "highlight groups",
        noremap = true,
      },
      {
        "<leader>Fmc",
        "<cmd>lua require('fzf-lua').commands()<cr>",
        desc = "commands",
        noremap = true,
      },
      {
        "<leader>Fmd",
        "<cmd>lua require('fzf-lua').command_history()<cr>",
        desc = "command history",
        noremap = true,
      },
      {
        "<leader>Fms",
        "<cmd>lua require('fzf-lua').search_history()<cr>",
        desc = "search history",
        noremap = true,
      },
      {
        [[<leader>Fm']],
        "<cmd>lua require('fzf-lua').marks()<cr>",
        desc = "marks",
        noremap = true,
      },
      {
        "<leader>Fmj",
        "<cmd>lua require('fzf-lua').jumps()<cr>",
        desc = "jumps",
        noremap = true,
      },
      {
        "<leader>FmC",
        "<cmd>lua require('fzf-lua').changes()<cr>",
        desc = "changes",
        noremap = true,
      },
      {
        "<leader>Fmr",
        "<cmd>lua require('fzf-lua').registers()<cr>",
        desc = "registers",
        noremap = true,
      },
      {
        "<leader>Fmt",
        "<cmd>lua require('fzf-lua').tagstack()<cr>",
        desc = "tags",
        noremap = true,
      },
      {
        "<leader>Fma",
        "<cmd>lua require('fzf-lua').autocmds()<cr>",
        desc = "autocmd",
        noremap = true,
      },
      {
        "<leader>Fmk",
        "<cmd>lua require('fzf-lua').keymaps()<cr>",
        desc = "keymaps",
        noremap = true,
      },
      {
        "<leader>Fmf",
        "<cmd>lua require('fzf-lua').filetypes()<cr>",
        desc = "filetypes",
        noremap = true,
      },
      {
        "<leader>FmM",
        "<cmd>lua require('fzf-lua').menus()<cr>",
        desc = "menus",
        noremap = true,
      },
      {
        "<leader>FmS",
        "<cmd>lua require('fzf-lua').spell_suggest()<cr>",
        desc = "spelling suggestions",
        noremap = true,
      },
      {
        "<leader>Fmp",
        "<cmd>lua require('fzf-lua').packadd()<cr>",
        desc = "packadd",
        noremap = true,
      },
    },
  },

  {
    "phanen/fzf-lua-overlay",
    dependencies = { "ibhagwan/fzf-lua" },
    cond = not vim.g.vscode,
    init = function()
      require("fzf-lua-overlay").init()
    end,
    -- stylua: ignore
    keys = {
      { "<leader>Fz", fl.zoxide, desc = "Zoxide", noremap = true },
    },
  },
}
