" incsearch configurations
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n <Plug>(incsearch-nohl-n)zzzv
map N <Plug>(incsaerch-nohl-N)zzzv
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" incsearch-fuzzy configurations
noremap <silent><expr> <LEADER>a/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> <LEADER>a? incsearch#go(<SID>config_fuzzyall({ 'command': '?' }))
noremap <silent><expr> <LEADER>ag/ incsearch#go(<SID>config_fuzzyall({ 'is_stay': 1 }))

" incsearch-easymotion configurations
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)
noremap <silent><expr> <LEADER>z/ incsearch#go(<SID>config_easyfuzzymotion())

" use both fuzzy & fuzzyspell feature
function! s:config_fuzzyall(...) abort
    return extend(copy({
    \   'converters': [
    \       incsearch#config#fuzzy#converter(),
    \       incsearch#config#fuzzyspell#converter()
    \   ],
    \ }), get(a:, 1, {}))
endfunction

" incsearch.vim x fuzzy x vim-easymotion
function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
    \   'converters': [incsearch#config#fuzzy#converter()],
    \   'modules': [incsearch#config#easymotion#module()],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
endfunction

