" fzf.vim configurations
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND = "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o -type -f -print -o -type l -print 2> /dev/null"
" >> the silver searcher
if executable('ag')
    let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
    set grepprg=ag\ --nogroup\ --nocolor
endif
" >> ripgrep
if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
    set grepprg=rg\ --vimgrep
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" enable file preview
command! -bang -nargs=? -complete=dir Files
\    call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

command! -bang -nargs=* GGrep
\    call fzf#vim#grep(
\        'git grep --line-number '.shellescape(<q-args>), 0,
\        fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

function! s:fzf_statusline()
    " Override statusline as you like
    highlight fzf1 ctermfg=161 ctermbg=251
    highlight fzf2 ctermfg=23 ctermbg=251
    highlight fzf3 ctermfg=237 ctermbg=251
    setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction
autocmd! User FzfStatusLine call <SID>fzf_statusline()

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <LEADER>fb :Buffers<CR>
nnoremap <silent> <C-F> :FZF -m<CR>
nnoremap <silent> <LEADER>ff :Rg<CR>
nnoremap <silent> <LEADER>fl :LinesWithPreview<CR>
nnoremap <silent> <LEADER>ft :BTags<CR>
nnoremap <silent> <LEADER>fk :Marks<CR>
nnoremap <silent> <LEADER>fw :Windows<CR>
nnoremap <silent> <LEADER>fh :MRU<CR>
nnoremap <silent> <LEADER>fs :Snippets<CR>
nnoremap <silent> <LEADER>fc :Commands<CR>
nnoremap <silent> <LEADER>fm :Maps<CR>
nnoremap <silent> <LEADER>fp :Helptags<CR>
nnoremap <silent> <LEADER>fa :Filetypes<CR>
nnoremap <silent> <LEADER>fgc :Commits<CR>
nnoremap <silent> <LEADER>fgl :GFiles<CR>
nnoremap <silent> <LEADER>fgs :GFiles?<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
\    'prefix': '^.*$',
\    'source': 'rg -n ^ --color always',
\    'options': '--ansi --delimiter : --nth 3..',
\    'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

function! s:make_sentence(lines)
    return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
endfunction

inoremap <expr> <c-x><c-s> fzf#vim#complete({
\    'source':  'cat /usr/share/dict/words',
\    'reducer': function('<sid>make_sentence'),
\    'options': '--multi --reverse --margin 15%,0',
\    'left':    20})

" fzf-quickfix configurations
nnoremap <LEADER>qf :Quickfix<CR>
nnoremap <LEADER>q! :Quickfix!<CR>

" Modified commands
command! -bang BTags
\    call fzf#vim#buffer_tags('', {
\        'down': '40%',
\        'options': '--with-nth 1 ' .
\                   '--reverse ' .
\                   '--prompt "> " ' .
\                   '--preview-window="70%" ' .
\                   '--preview "'.
\                       'tail -n +(echo {3} | tr -d \";\\\"\") {2} | ' .
\                       'head -n 16"'
\ })

command! -bang -nargs=* MRU call fzf#vim#history(fzf#vim#with_preview())

command! -bang -nargs=* LinesWithPreview
    \ call fzf#vim#grep(
    \   'rg --with-filename --column --line-number --no-heading --color=always --smart-case . '.fnameescape(expand('%')), 1,
    \   fzf#vim#with_preview({}, 'up:50%', '?'),
    \   1)
