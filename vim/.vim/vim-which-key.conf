" Map leader to which_key
nnoremap <silent> <leader> :silent WhichKey ','<CR>
vnoremap <silent> <leader> :silent <c-u> :WhichKeyVisual ','<CR>

" By default timeoutlen is 1000ms
set timeoutlen=500

" Define prefix dictionary
let g:which_key_map  = {}
" Exit which-key when the key is triggered
let g:which_key_exit = "\<C-G>"
" Set the maximum height/width of the guide window
let g:which_key_max_size = 4
" Set the minimum horizontal space between columns
let g:which_key_hspace = 2

" Second level dictionaries:
" 'name' is a special field. It will define the name of the group, e.g.,
" leader-f is the "+file" group.
" Unnamed groups will show a default empty string.

" =======================================================
" Create menus based on existing mappings
" =======================================================
" You can pass a descriptive text to an existing mapping.

" keybinds which has prefix `<leader>l`
let g:which_key_map['l'] = {
    \ 'name' : "+languages"  ,
    \ 'r' : [':set ft=rust'  , 'set filetype to rust file']  ,
    \ 'v' : [':set ft=vim'   , 'set filetype to vim file']   ,
    \ }

" keybinds which has prefix `<leader>g`
let g:which_key_map['g'] = {
    \ 'name' : "+git"        ,
    \ 'a' : [':Gwrite'       , 'write current file and stage']  ,
    \ }


" Assuming your `leader` key is `,`
call which_key#register(',', "g:which_key_map")

