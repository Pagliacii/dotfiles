" LeaderF configurations

" Use this option to set the mapping of searching files command. Default value is '<leader>f'.
let g:Lf_ShortcutF = '<LEADER>ff'

" Use this option to set the mapping of searching buffers command. Default value is '<leader>b'.
let g:Lf_ShortcutB = '<LEADER>fb'

" Setting this option can change the position of the LeaderF window.
" The value can be 'fullScreen', 'top', 'bottom', 'left', 'right'.
" 'fullScreen' - the LeaderF window take up the full screen
" 'top' - the LeaderF window is at the top of the screen.
" 'bottom' - the LeaderF window is at the bottom of the screen.
" 'left' - the LeaderF window is at the left of the screen.
" 'right' - the LeaderF window is at the right of the screen.
" 'popup' - the LeaderF window is a popup window or floating window.
" Default value is 'bottom'.
let g:Lf_WindowPosition = 'popup'

" Specify the files and directories you want to exclude while indexing.
" Default value is:
" let g:Lf_WildIgnore = {
"         \ 'dir': [],
"         \ 'file': []
"         \}
"
" Here uses the Unix shell-style wildcards, which are not the same as
" regular expressions. The special characters used in shell-style wildcards are:
" Pattern  |          Meaning
" -------------------------------------------
" *        | matches everything
" ?        | matches any single character
" [seq]    | matches any character in seq
" [!seq]   | matches any character not in seq
" -------------------------------------------
let g:Lf_WildIgnore = {
\    'dir': ['node_modules', '.git', '.svn', '.hg'],
\    'file': ['.gitignore', '*.sw?', '~$*', '*.bak', '*.exe', '*.o', '*.so', '*.py[co]']
\ }

" This option indicates that do not display the MRU files whose file name matches the patterns defined in it.
let g:Lf_MruWildIgnore = {
\    'dir': ['node_modules', '.git', '.svn', '.hg'],
\    'file': ['.gitignore', '*.sw?', '~$*', '*.bak', '*.exe', '*.o', '*.so', '*.py[co]']
\ }

" You can configure the colorscheme of statusline for LeaderF.
" e.g.
" let g:Lf_StlColorscheme = 'powerline'
"
" The colorscheme files can be found in the directory
" 'LeaderF/autoload/leaderf/colorscheme/'
"
" Default value is 'default'.
let g:Lf_StlColorscheme = 'one'

" A Dictionary to store separators.
let g:Lf_StlSeparator = { 'left': '', 'right': '' }

" Use this option to specify the options of ctags to generate the tags of functions.
let g:Lf_CtagsFuncOpts = {
\    'c': '--c-kinds=fp',
\    'rust': '--rust-kinds=f',
\ }

" Use this option to specify whether to show the preview of the code the tag locates in when navigating the tags. Default value is 0.
let g:Lf_PreviewCode = 1

" Use this option to specify the default external tool which is used to index the files.
" By default, use the external tool in the sequence of 'rg', 'pt', 'ag', 'find' if one is available.
let g:Lf_DefaultExternalTool = 'rg'

" To Specify whether to search hidden files and directories.
let g:Lf_ShowHidden = 1

" Show results in bottom-up order.
let g:Lf_ReverseOrder = 0

" Specify a list of ripgrep configurations.
let g:Lf_RgConfig = [
\    "--column",
\    "--max-columns=150",
\    "--line-number",
\    "--no-heading",
\    "--fixed-strings",
\    "--ignore-case",
\    "--hidden",
\    "--follow",
\    "--glob=!git/*",
\    "--color=always"
\ ]

" This option specifies whether to preview the result in a popup window.
let g:Lf_PreviewInPopup = 1

" Specify where to locate the preview window horizontally.
let g:Lf_PreviewHorizontalPosition = 'center'

" Specify the width of the popup window or floating window when LeaderF is in popup mode.
let g:Lf_PopupWidth = &columns * 3 / 5

" Specify the height of the popup window or floating window when LeaderF is in popup mode.
let g:Lf_PopupHeight = float2nr(&lines * 0.3)

" Specify where to locate the preview window when LeaderF is in popup mode.
let g:Lf_PopupPreviewPosition = 'top'

" You can configure the colorscheme of LeaderF in popup mode.
let g:Lf_PopupColorscheme = 'default'

" This is a dictionary, indicates whether to enable the preview of the result.
let g:Lf_PreviewResult = {
\    'File': 1,
\    'Buffer': 0,
\    'Mru': 0,
\    'Tag': 0,
\    'BufTag': 1,
\    'Function': 1,
\    'Line': 0,
\    'Colorscheme': 0,
\    'Rg': 0,
\    'Gtags': 0
\   }

" Specify the coordinate of the topleft corner of popup window of floating
" window when LeaderF is in popup mode.
let g:Lf_PopupPosition = [ 22, 0 ]

" To specify whether to show the hint `Press <F1> for help` in normal mode.
let g:Lf_HideHelp = 1

" This option specifies whether to cache the files list.
let g:Lf_UseCache = 0

" This option specifies whether to use version control tool to index the files
" when inside a repository under control.
let g:Lf_UseVersionControlTool = 0

" This option specifies whether to remove the current buffer name from the
" result list.
let g:Lf_IgnoreCurrentBufferName = 1

noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e \"\"")<CR><CR>
noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg -e \"\"")<CR><CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

